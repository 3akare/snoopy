# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import prediction_services_pb2 as prediction__services__pb2


class LstmServiceStub(object):
    """=================== LSTM Service ===================
    Defines the prediction service that runs the LSTM model.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Predict = channel.unary_unary(
                '/services.LstmService/Predict',
                request_serializer=prediction__services__pb2.LstmRequest.SerializeToString,
                response_deserializer=prediction__services__pb2.LstmResponse.FromString,
                )


class LstmServiceServicer(object):
    """=================== LSTM Service ===================
    Defines the prediction service that runs the LSTM model.
    """

    def Predict(self, request, context):
        """A simple RPC call that takes multiple gesture sequences and returns predictions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LstmServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Predict': grpc.unary_unary_rpc_method_handler(
                    servicer.Predict,
                    request_deserializer=prediction__services__pb2.LstmRequest.FromString,
                    response_serializer=prediction__services__pb2.LstmResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'services.LstmService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LstmService(object):
    """=================== LSTM Service ===================
    Defines the prediction service that runs the LSTM model.
    """

    @staticmethod
    def Predict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/services.LstmService/Predict',
            prediction__services__pb2.LstmRequest.SerializeToString,
            prediction__services__pb2.LstmResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class NlpServiceStub(object):
    """=================== NLP Service ===================
    Defines the text processing service that refines the prediction.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Refine = channel.unary_unary(
                '/services.NlpService/Refine',
                request_serializer=prediction__services__pb2.NlpRequest.SerializeToString,
                response_deserializer=prediction__services__pb2.NlpResponse.FromString,
                )


class NlpServiceServicer(object):
    """=================== NLP Service ===================
    Defines the text processing service that refines the prediction.
    """

    def Refine(self, request, context):
        """A simple RPC call that takes raw text and returns a refined version.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NlpServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Refine': grpc.unary_unary_rpc_method_handler(
                    servicer.Refine,
                    request_deserializer=prediction__services__pb2.NlpRequest.FromString,
                    response_serializer=prediction__services__pb2.NlpResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'services.NlpService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NlpService(object):
    """=================== NLP Service ===================
    Defines the text processing service that refines the prediction.
    """

    @staticmethod
    def Refine(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/services.NlpService/Refine',
            prediction__services__pb2.NlpRequest.SerializeToString,
            prediction__services__pb2.NlpResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
